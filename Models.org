#+TITLE: Models used in this app

* DONE [[http://localhost:3000/randomquote][RandomQuote]]: get a random quote (or all quotes) from a =<DATA>=-base

This is a simple, non-OO model that stores a list of quotes in its own
=<DATA>= handle for retrieval via a couple of subs.  Ashley's original app
emitted these quotations in either plain text or as a fragment of
markup; my app expands on this by emitting quotes in JSON and using
JavaScript to render them properly on a page.

* DONE [[http://localhost:3000/moonphase][MoonPhase]]: show phase-of-moon and illumination

Another simple model, also non-OO, but uses additional code from
Astro::MoonPhase and Date::Manip.  Again, app is different from the
original by emitting in JSON to be read by JavaScript filling a section
of the page, as well as being able to handle bad input correctly (by
bailing out in case of bad input via Try::Tiny.)  Still needs test
scripts though, at least for the Perl parts.

* DONE [[http://localhost:3000/covers][CoverImages]]: get some product cover images from OpenLibrary

Unlike the previous models, this one exposes an OO API as it requires
configuration from the app.  Ashley's implementation used Amazon's
Product Advertising API, which has since changed into a less accessible
API (it now requires a distinct Amazon Associates account.)  My app uses
the OpenLibrary API instead, and also is more dependent on the Mojo
framework, using Mojo::UserAgent (instead of LWP::UserAgent) for the API
call and Mojo::DOM (instead of XML::LibXML) for data extraction.

* DONE [[http://localhost:3000/randomnumber][RandomNumber]]: get a random number

This model is meant to be an example of growing a model from one simple
implementation to another: coming from local usage of =rand()= to using a
remote API from [[https://www.random.org/clients/http/][Random.org]].  The remote API has changed a bit since
Ashley's original implementation, as Random.org now exposes a JSON-RPC
API in addition to their HTTP interface.  Thus, my app uses this newer
API through an addition of a generator for Mojo::UserAgent, leveraging
its native capabilities for JSON.
